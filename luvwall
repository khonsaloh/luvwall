#!/usr/bin/env bash
link="https://source.unsplash.com/random/"

#environment variables
: "${LUVWALL_CONFIG:=${XDG_CONFIG_HOME:-$HOME/.config}/luvwall.conf}"

# allow custom variables in configuration file
[ -f "$LUVWALL_CONFIG" ] && . "$LUVWALL_CONFIG"

: "${wallpaper_setter:=xwallpaper --zoom}"
: "${wall_save_path:=${HOME}/Pictures/wallpaper${RANDOM}.jpg}"
: "${download_location:=/tmp/luvwall/wallpaper.jpg}"
: "${useragent='Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0'}"

#this location is usually mounted on ram so many operations of writing doesn't affect your drives
: "${cachedir:=/tmp/livewall}"

[ -d "${cachedir}" ] || mkdir -p "${cachedir}"

wallpaper="${cachedir}/wallpaper.jpg"

die() {
    printf "ERR: %s\n" "$1" >&2
    exit 1
}

wallpaper_prog_cmd() {
    $wallpaper_setter "$wallpaper"
}

save_cmd(){
    cp -i "${wallpaper}" "${wall_save_path}"
}

# https://github.com/egeesin/alacritty-color-export
alacritty_change() {
    DEFAULT_MACOS_CONFIG="$HOME"/.config/alacritty/alacritty.yml
    
    # Wal generates a shell script that defines color0..color15
    SRC="$HOME"/.cache/wal/colors.sh
    
    [ -e "$SRC" ] || die "Wal colors not found, exiting script. Have you executed Wal before?"
    printf "Colors found, source ready.\n"
    
    READLINK=$( command -v greadlink || command -v readlink )
    
    # Get config file
    if [ -n "$1" ]; then
        [ -e "$1" ] || die "Selected config doesn't exist, exiting script."
        printf "Config found, destination ready.\n"
        CFG=$1
        [ -L "$1" ] && {
            printf "Following symlink to config...\n"
            CFG=$($READLINK -f "$1")
        }
    else
        # Default config path in Mac systems
        [ -e "$DEFAULT_MACOS_CONFIG" ] || die "Alacritty config not found, exiting script."
        
        CFG="$DEFAULT_MACOS_CONFIG"
        [ -L "$DEFAULT_MACOS_CONFIG" ] && {
            printf "Following symlink to config...\n"
            CFG=$($READLINK -f "$DEFAULT_MACOS_CONFIG")
        }
    fi
    
    # Get hex colors from Wal cache
    # No need for shellcheck to check this, it comes from pywal
    # shellcheck disable=SC1090
    . "$SRC"
    
    # Create temp file for sed results
    tempfile=$(mktemp)
    trap 'rm $tempfile' INT TERM EXIT
    
    # Delete existing color declarations generated by this script
    # If begin comment exists
    if grep -q '^# BEGIN ACE' "$CFG"; then
        # And if end comment exists
        if grep -q '^# END ACE' "$CFG"; then
            # Delete contents of the block
            printf "Existing generated colors found, replacing new colors...\n"
            sed '/^# BEGIN ACE/,/^# END ACE/ {
        /^# BEGIN ACE/! { /^# END ACE/!d; }
            }' "$CFG" > "$tempfile" \
            && cat "$tempfile" > "$CFG"
            # If no end comment, don't do anything
        else
            die "No '# END ACE' comment found, please ensure it is present."
        fi
        # If no begin comment found
    else
        # Don't do anything and notify user if there's an end comment in the file
        ! grep -q '^# END ACE' "$CFG" || die "Found '# END ACE' comment, but no '# BEGIN ACE' comment found. Please ensure it is present."
        printf "There's no existing 'generated' colors, adding comments...\n";
        printf '# BEGIN ACE\n# END ACE' >> "$CFG";
    fi
    
    # Write new color definitions
    # We know $colorX is unset, we set it by sourcing above
    # shellcheck disable=SC2154
    { sed "/^# BEGIN ACE/ r /dev/stdin" "$CFG" > "$tempfile" <<EOP
colors:
  primary:
    background: '$color0'
    foreground: '$color7'
  cursor:
    text:       '$color0'
    cursor:     '$color7'
  normal:
    black:      '$color0'
    red:        '$color1'
    green:      '$color2'
    yellow:     '$color3'
    blue:       '$color4'
    magenta:    '$color5'
    cyan:       '$color6'
    white:      '$color7'
  bright:
    black:      '$color8'
    red:        '$color9'
    green:      '$color10'
    yellow:     '$color11'
    blue:       '$color12'
    magenta:    '$color13'
    cyan:       '$color14'
    white:      '$color15'
EOP
} && cat "$tempfile" > "$CFG" \
&& rm "$tempfile"
trap - INT TERM EXIT
printf "'%s' exported to '%s'\n" "$SRC" "$CFG"
}

reddit(){
timeout=60
sort=$2
top_time=$3
[ -z "$sort" ] && sort="hot"
[ -z "$top_time" ] && top_time=""

if [ -n "$1" ]; then
    sub=$1
else
    if [ ! -f "${confdir}/subreddits" ]; then
        echo "Please install the subreddits file in ${confdir}"
        exit 2
    fi
    readarray subreddits < "${confdir}/subreddits"
    a=${#subreddits[@]}
    b=$((RANDOM % a))
    sub=${subreddits[$b]}
    sub="$(echo -e "${sub}" | tr -d '[:space:]')"
fi

url="https://www.reddit.com/r/$sub/$sort/.json?raw_json=1&t=$top_time"
content=$(wget -T $timeout -U "$useragent" -q -O - $url)
urls=$(echo -n "$content"| jq -r '.data.children[]|select(.data.post_hint|test("image")?) | .data.preview.images[0].source.url')
names=$(echo -n "$content"| jq -r '.data.children[]|select(.data.post_hint|test("image")?) | .data.title')
ids=$(echo -n "$content"| jq -r '.data.children[]|select(.data.post_hint|test("image")?) | .data.id')
arrURLS=($urls)
arrNAMES=($names)
arrIDS=($ids)
wait # prevent spawning too many processes
size=${#arrURLS[@]}
if [ $size -eq 0 ]; then
    printf '%s\n' "The current subreddit is not valid."
    exit 1
fi
idx=$((RANDOM % size))
target_url=${arrURLS[$idx]}
target_name=${arrNAMES[$idx]}
target_id=${arrIDS[$idx]}
pre_ext=$(echo -n "${target_url##*.}") #|cut -d '?' -f 1)
ext=${pre_ext%?*}
newname=$(echo $target_name | sed "s/^\///;s/\// /g")_"$subreddit"_$target_id.$ext
wget -T $timeout -U "$useragent" --no-check-certificate -q -P down -O "${wallpaper}" $target_url &>/dev/null
}

unsplash() {
    local search="${search// /_}"
    if [ -n "$height" ] || [ -n "$width" ]; then
        link="${link}${width}x${height}";
    else
        link="${link}1920x1080";
    fi
    
    [ -n "$search" ] && link="${link}/?${search}"
    wget -q -O "${wallpaper}" $link
}

deviantart(){
    [ -z "$devianart_client_id" ] && { devianart_client_id=16531; devianart_client_secret=68c00f3d0ceab95b0fac638b33a3368e; }
    payload="grant_type=client_credentials&client_id=${devianart_client_id}&client_secret=${devianart_client_secret}"
    access_token=$(curl --silent -d $payload https://www.deviantart.com/oauth2/token | jq -r '.access_token')
    if [ -n "$1" ]; then
        artist=$1
        url="https://www.deviantart.com/api/v1/oauth2/gallery/?username=${artist}&mode=popular&limit=24"
    elif [ -n "$search" ]; then
        [[ "$search" =~ ^(tag:)(.*)$ ]] && tag=${BASH_REMATCH[2]}
        if [ ! -z $tag ]; then
            url="https://www.deviantart.com/api/v1/oauth2/browse/tags?tag=$tag&offset=${RANDOM:0:2}&limit=24"
        else
            url="https://www.deviantart.com/api/v1/oauth2/browse/popular?q=$search&limit=24&timerange=1month"
        fi
    else
        #url="https://www.deviantart.com/api/v1/oauth2/browse/hot?limit=24&offset=${offset}"
        topics=( "adoptables" "artisan-crafts" "anthro" "comics" 
          "drawings-and-paintings" "fan-art" "poetry" "stock-images" "sculpture"
          "science-fiction" "traditional-art" "street-photography" "street-art" 
          "pixel-art" "wallpaper" "digital-art" "photo-manipulation" "science-fiction" "fractal"
          "game-art" "fantasy" "3d" "drawings-and-paintings" "game-art" )
        rand=$((RANDOM % ${#topics[@]}))
        url="https://www.deviantart.com/api/v1/oauth2/browse/topic?limit=24&topic=${topics[$rand]}"
    fi
    content=$(curl --silent -H "Authorization: Bearer ${access_token}" \
      -H "Accept: application/json" -H "Content-Type: application/json" $url)
    urls=$(echo -n $content | jq -r '.results[].content.src')
    arrURLS=($urls)
    size=${#arrURLS[@]}
    idx=$((RANDOM % size))
    target_url=${arrURLS[$idx]}
    wget --no-check-certificate -q -P down -O ${wallpaper} $target_url &>/dev/null
}

nasa_image() {
    [ -z "$nasa_api" ] && nasa_api=DEMO_KEY
    wget -T 10 -q $(curl -sf "https://api.nasa.gov/planetary/apod?api_key=$nasa_api" \
      |jq -r ".url") -O $wallpaper
}

wallhaven() {
    wget -T 10 -q $(curl -s -G "https://wallhaven.cc/api/v1/search" \
                    -d "q=$1" -d "atleast=1920x1080" | jq -r '.data[].path' | shuf -n 1) -O $wallpaper
}

pixabay() {
    wget -q $(curl -s -G "https://pixabay.com/api/?key="$pixabay_api"&q=$1&image_type=photo" \
      | jq -r '.hits[].largeImageURL' | shuf -n 1) -O $wallpaper
}

pexels() {
    wget -q -U $useragent "$(curl --user-agent $useragent -s -H "Authorization: $pexels_api" \
    "https://api.pexels.com/v1/search?query=$1" | jq -r '.photos[].src.medium')" -O $wallpaper
}

fijo() {
  $wallpaper_setter "$(cat "$HOME"/.local/share/fondo.txt)"
}

bing() {
  url="$(curl -s "https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=9&mkt=en-US" \
    | jq -r '.images[].url' | shuf -n 1)"
  wget -q "https://www.bing.com$url" \
    -O $wallpaper
}

usage(){
    echo "Usage: ${0##*/} [-s | --search <string>]
    -h  | --height <height>
    -w  | --width <width>
    -l  | --link <source>
    -p  | --termcolor
    -L  | --lightwal
    -d  | --directory </path/to/dir>
    -e  | --established
    -a  | --artist <deviant artist>
    -B  | --bing
    -n  | --nasa
    -pb | --pixabay <search>
    -px | --pexels <search>
    -r  | --subreddit <subreddit>
    -wh | --wallhaven <search>
    -S  | --save <Save current image to directory>
    "
    exit 2
}

type_check() {
    mime_types=("image/jpeg" "image/png" "image/bmp" "image/gif" "image/heic")
    isType=false
    
    for requiredType in "${mime_types[@]}"; do
        imageType=$(file -b --mime-type ${wallpaper})
        if [ "$requiredType" = "$imageType" ]; then
            isType=true; break
        fi
    done
    
    if [ $isType = false ]; then
        printf '%s\n' "Downloaded file is not an image!"
        exit 1
    fi
}

select_local_random_wallpaper () {
    wallpaper=$(find $dir -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \
      -o -iname "*.gif" \) -print | shuf -n 1)
}

pywal_cmd() {
     if [ -n "$pywall" ]; then
       wal -c; wal -i "${wallpaper}" -n -q "${light}"
       [ "$TERM" = alacritty ] && alacritty_change
     fi
}

PARSED_ARGUMENTS=$(getopt -a -n $0 -o h:w:s:l:px:wh:r:pb:a:d:peBnLS \
  --long search:,height:,pexels:,width:,bing,pixabay:,wallhaven:,artist:, \
  subreddit:,established,directory:,termcolor:,nasa,lighwal:,save -- "$@")

VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then
    usage; exit
fi
while :; do
    case "${1}" in
        -s | --search)    search=${2} ; shift 2 ;;
        -S | --save)    save_cmd; exit ;;
        -h | --height)    height=${2} ; shift 2 ;;
        -w | --width)     width=${2} ; shift 2 ;;
        -l | --link)      link=${2} ; shift 2 ;;
        -r | --subreddit) sub=${2} ; shift 2 ;;
        -a | --artist) artist=${2} ; shift 2 ;;
        -L | --lightwal)  pywall=true; light='-l' ; shift ;;
        -p | --termcolor) pywall=true ; shift ;;
        -d | --directory) dir=${2};link=null ; shift 2 ;;
        -n | --nasa) link=nasa ; shift ;;
        -e | --established) fijo ; exit;;
        -B | --bing) link=bing ; shift;;
        -wh | --wallhaven) search=${2}; link=wallhaven ; shift 2;;
        -pb | --pixabay) search=${2}; link=pixabay; shift 2;;
        -px | --pexels) search=${2}; link=pexels; shift 2;;
        -- | '') shift; break ;;
        *) usage ;;
    esac
done

case $link in
  null) select_local_random_wallpaper;;
  reddit)reddit "$sub";;
  devianart) devianart "$artist";;
  wallhaven) wallhaven "$search";;
  pexels) pexels "$search";;
  pixabay) pixabay "$search";;
  bing) bing;;
  nasa)nasa_image;;
  *)unsplash;;
esac

type_check
wallpaper_prog_cmd
pywal_cmd
