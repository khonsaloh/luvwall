#!/bin/sh

#environment variables
: "${LUVWALL_CONFIG:=${XDG_CONFIG_HOME:-$HOME/.config}/luvwall.conf}"
[ -f "$LUVWALL_CONFIG" ] && . "$LUVWALL_CONFIG"

: "${wallpaper_setter:=xwallpaper --zoom}"
: "${wall_save_path:=${XDG_PICTURES_DIR:=$HOME/Pictures}/wallpaper$(date +%s).jpg}"
: "${useragent:='Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0'}"
: "${cachedir:=/tmp/livewall}"

timeout=60
confdir=${XDG_CONFIG_HOME:-$HOME/.config}
#: "${wallpaper_dir:=$HOME/imagenes/wallpapers}"

[ -d "${cachedir}" ] || mkdir -p "${cachedir}"

wallpaper="${cachedir}/wallpaper.jpg"

: "${topics:='nature night space anime'}"

search() {
  search=$(echo $topics | tr ' ' '\n'| shuf -n1)
}

die() {
    printf '\033[1;31m%s \033[0m\n' "ERR: $1" >&2
    exit 1
}

wallpaper_prog_cmd() {
    $wallpaper_setter "$wallpaper"
}

save_cmd(){
    cp -i "${wallpaper}" "${wall_save_path}" \
      && notify-send -u low -t 2000 "copied to ${wall_save_path}" 2>/dev/null \
      || notify-send -u critical -t 4000 "not copied" 2>/dev/null
}

# reddit {{{
reddit(){
  sort="hot"
  top_time=""
  
  if [ -n "$search" ]; then
      sub=$search
  else
      if [ ! -f "${confdir}/subreddits" ]; then
          die "Please install the subreddits file in ${confdir}"
      fi
      sub=$(shuf -n1 < "${confdir}/subreddits")
      sub="$(echo "${sub}" | tr -d '[:space:]')"
  fi
  
  url="https://www.reddit.com/r/$sub/$sort/.json?raw_json=1&t=$top_time"
  content=$(wget -T $timeout -U "$useragent" -q -O - $url)
  urls=$(printf '%s' "$content"| jq -r '.data.children[]|select(.data.post_hint|test("image")?) | .data.preview.images[0].source.url')
  url=$(echo $urls | tr ' ' '\n'| shuf -n1)
   [ -z "$url" ] && die "The current subreddit is not valid."
  wget -T $timeout -U "$useragent" --no-check-certificate -q -P down -O "${wallpaper}" $url
}
# }}}
unsplash() {
  link="https://source.unsplash.com/random/"
    if [ -n "$height" ] || [ -n "$width" ]; then
        link="${link}${width}x${height}"
    else
        link="${link}1920x1080"
    fi

    [ -n "$search" ] && link="${link}/?${search}"
    wget -q -O "${wallpaper}" $link
}

# deviant art {{{
deviantart(){
    : "${devianart_client_secret:=68c00f3d0ceab95b0fac638b33a3368e}"
    payload="grant_type=client_credentials&client_id=${devianart_client_id:=16531}&client_secret=${devianart_client_secret}"
    access_token=$(curl --silent -d $payload https://www.deviantart.com/oauth2/token | jq -r '.access_token')
    
    if [ -n "$search" ]; then
        url="https://www.deviantart.com/api/v1/oauth2/browse/popular?q=$search&limit=100&timerange=alltime"
    else
        topics='adoptables artisan-crafts anthro comics
        drawings-and-paintings fan-art poetry stock-images sculpture
          science-fiction traditional-art street-photography street-art
          pixel-art wallpaper digital-art photo-manipulation science-fiction fractal
          game-art fantasy 3d drawings-and-paintings game-art'

        rand=$(echo $topics | tr ' ' '\n'| shuf -n1)
        url="https://www.deviantart.com/api/v1/oauth2/browse/topic?limit=24&topic=$rand"
    fi
    
    content=$(curl --silent -H "Authorization: Bearer ${access_token}" \
      -H "Accept: application/json" -H "Content-Type: application/json" "$url")
    urls=$(printf '%s' $content | jq -r '.results[].content.src')
#    echo $urls | tr ' ' '\n' | wc -l
    url=$(echo $urls | tr ' ' '\n'| shuf -n1)
    wget --no-check-certificate -q -P down -O ${wallpaper} "$url"
}
# }}}

nasa_image() {
    [ "$link" = "nasa_random" ] \
      && day=$(shuf -n1 -i $(date -d "${nasa_start_date:=2000-01-01}" '+%s')-$(date '+%s')\
      | xargs -I{} date -d '@{}' '+%Y-%m-%d') && echo "image of the day of $day"
    wget -T $timeout -q $(curl -sf -G "https://api.nasa.gov/planetary/apod?api_key=${nasa_api:-DEMO_KEY}" -d "date=$day" \
      |jq -r ".url") -O $wallpaper 2>/dev/null
}

wallhaven() {
    [ -z "$search" ] && search
    total_pages=$(curl -s -G "https://wallhaven.cc/api/v1/search" \
      -d "q=$search&atleast=1920x1080&ratios=16x9" | jq '.meta.last_page')
    random_page=$(shuf -i 1-$total_pages -n 1)
    wget -T $timeout -q $(curl -s -G "https://wallhaven.cc/api/v1/search" \
                    -d "q=$search&atleast=1920x1080&ratios=16x9&page=$random_page" \
                    | jq -r '.data[].path' | shuf -n 1) -O $wallpaper
}

pixabay() {
    #api limited to 500 images per search
    [ -z "$search" ] && search
    total_images=$(curl -s -G "https://pixabay.com/api/?key="$pixabay_api"&q=$search&image_type=photo" \
     | jq -r '.totalHits')
    random_page=$((total_images / 20))
    [ $total_images -lt 21 ] && random_page=1
    wget -q $(curl -s -G "https://pixabay.com/api/?key="$pixabay_api"&q=$search&image_type=photo&page=$random_page" \
      | jq -r '.hits[].largeImageURL' | shuf -n 1) -O $wallpaper
}

pexels() {
    [ -z "$search" ] && search
    total_results="$(curl --user-agent $useragent -s -H "Authorization: $pexels_api" \
      "https://api.pexels.com/v1/search?query=$search&orientation=landscape" | jq '.total_results')"
    total_pages=$((total_results / 15))
    random_page=$(shuf -i 1-$total_pages -n 1)
    wget --show-progress -q -U $useragent "$(curl --user-agent $useragent -s -H "Authorization: $pexels_api" \
    "https://api.pexels.com/v1/search?query=$search&page=$random_page&orientation=landscape" \
    | jq -r '.photos[].src.large' | shuf -n 1)" -O $wallpaper
}

fijo() {
  $wallpaper_setter "${XDG_CACHE_HOME:=$HOME/.cache}/fondo"
}

bing() {
  url="$(curl -s "https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=${bing_day:=9}&mkt=en-US" \
    | jq -r '.images[].url' | shuf -n 1)"
  wget -q "https://www.bing.com$url" \
    -O $wallpaper
}

# usage help {{{
usage(){
    echo "Usage: ${0##*/}
    [-s <string>] search (default unsplash if passed alone)
    [-H <height>] unsplash only
    [-W <width>] unsplash only
    [-l <link>] set wallpaper from link
    [-P]  pywall
    [-L]  pywall light color scheme
    [-a <search>]  deviantart
    [-b]  bing
    [-n]  nasa image of the day
    [-N]  nasa random image
    [-p <search>] pixabay
    [-x <search>] pexels
    [-r <subreddit>] reddit
    [-w <search>] wallhaven
    [-S]  save current image
    [-e]  restore saved wallpaper
    [-d </path/to/dir>] random image from directory"
    exit 2
}
#}}}

# type check {{{
type_check() {
    mime_types="image/jpeg image/png image/bmp image/gif image/heic"

    imageType=$(file -b --mime-type $wallpaper)
    for requiredType in $mime_types; do
        if [ "$requiredType" = "$imageType" ]; then
            isType=true; break
        fi
    done

    [ "$isType" ] || die "Downloaded file is not an image!"
}
# }}}

select_local_random_wallpaper () {
  wallpaper=$(find "$wallpaper_dir" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \
    -o -iname "*.gif" \) -print | shuf -n 1)
}

pywal_cmd() {
     if [ -n "$pywall" ]; then
       wal -c; wal -i "${wallpaper}" -n -q "$light"
       [ "$TERM" = alacritty ] && alacritty_change
     fi
}

while getopts 'eSLPbrwpxnaNs:d:l:H:W:' o; do
    case "$o" in
        e) fijo; exit;;
        S) save_cmd; exit ;;
        s) search="$(echo $OPTARG | tr ' ' '+')";;
        H) height=$OPTARG ;;
        W) width=$OPTARG ;;
        l) link='link'; search=$OPTARG ;;
        r) sub="$(echo $OPTARG | tr ' ' '+')"; link=reddit ;;
        a) link=deviantart ;;
        L) pywall=true; light='-l' ;;
        P) pywall=true ;;
        d) wallpaper_dir=$OPTARG;link=null;;
        n) link=nasa  ;;
        N) link=nasa_random ;;
        b) link=bing ;;
        w) link=wallhaven;;
        p) link=pixabay;;
        x) link=pexels;;
        *) usage ;;
    esac
done

shift $((OPTIND - 1))

case $link in
  null) select_local_random_wallpaper;;
  reddit) reddit;;
  deviantart) deviantart;;
  wallhaven) wallhaven;;
  pexels) pexels;;
  pixabay) pixabay;;
  bing) bing;;
  nasa*) nasa_image;;
  link) wget -U "$useragent" -q "$search" -O "$wallpaper";;
  *)unsplash;;
esac

type_check
wallpaper_prog_cmd
pywal_cmd

# vim:foldmethod=marker
